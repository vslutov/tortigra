// Generated by CoffeeScript 1.6.2
(function() {
  var count, dfs, fs, maybe, spawn,
    _this = this;

  fs = require('fs');

  spawn = require('child_process').spawn;

  dfs = function(callback) {
    var count, result, temp;
    count = 0;
    result = {};
    temp = function(pathname) {
      var _this = this;
      ++count;
      return fs.stat(pathname, function(error, fileinfo) {
        result[pathname] = fileinfo.mtime.valueOf();
        return fs.readdir(pathname, function(error, filelist) {
          var file, _i, _len;
          --count;
          if (error == null) {
            for (_i = 0, _len = filelist.length; _i < _len; _i++) {
              file = filelist[_i];
              temp(pathname + '/' + file);
            }
          }
          if (count === 0) {
            return callback(result);
          }
        });
      });
    };
    return temp('.');
  };

  count = 0;

  maybe = function() {
    var child,
      _this = this;
    --count;
    if (count === 0) {
      child = spawn('node', ['lib/index.js']);
      child.stdout.on('data', function(data) {
        return process.stdout.write(data);
      });
      return child.stderr.on('data', function(data) {
        return process.stdout.write(data);
      });
    }
  };

  dfs(function(filelist) {
    var ex, file, mtime;
    for (file in filelist) {
      mtime = filelist[file];
      ex = /^.\/src\/(.*)\.less$/.exec(file);
      if (ex != null) {
        ++count;
        spawn('node', ['node_modules/less/bin/lessc', file, './' + ex[1] + '.css']).on('exit', maybe);
      }
      ex = /^.\/src\/(.*?)([^\/]+)\.coffee$/.exec(file);
      if (ex != null) {
        ++count;
        spawn('node', ['node_modules/coffee-script/bin/coffee', '-co', './' + ex[1], file]).on('exit', maybe);
      }
    }
    ++count;
    return maybe();
  });

}).call(this);
